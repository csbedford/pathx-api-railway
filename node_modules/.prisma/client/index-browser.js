
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  role: 'role',
  organizationId: 'organizationId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CampaignScalarFieldEnum = {
  id: 'id',
  name: 'name',
  brandId: 'brandId',
  objectives: 'objectives',
  budget: 'budget',
  status: 'status',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RFPScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  partners: 'partners',
  status: 'status',
  requestedAt: 'requestedAt',
  responses: 'responses',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PartnerScalarFieldEnum = {
  id: 'id',
  name: 'name',
  displayName: 'displayName',
  type: 'type',
  status: 'status',
  companyInfo: 'companyInfo',
  contactInfo: 'contactInfo',
  apiCredentials: 'apiCredentials',
  targetingOptions: 'targetingOptions',
  measurementCapabilities: 'measurementCapabilities',
  onboardingStatus: 'onboardingStatus',
  onboardingSteps: 'onboardingSteps',
  pricingInfo: 'pricingInfo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PartnerCapabilityScalarFieldEnum = {
  id: 'id',
  partnerId: 'partnerId',
  name: 'name',
  description: 'description',
  category: 'category',
  details: 'details',
  isActive: 'isActive',
  lastUpdated: 'lastUpdated',
  sourceType: 'sourceType',
  sourceData: 'sourceData',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CreativeSpecScalarFieldEnum = {
  id: 'id',
  partnerId: 'partnerId',
  format: 'format',
  dimensions: 'dimensions',
  fileType: 'fileType',
  maxFileSize: 'maxFileSize',
  requirements: 'requirements',
  examples: 'examples',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PartnerHealthMetricScalarFieldEnum = {
  id: 'id',
  partnerId: 'partnerId',
  timestamp: 'timestamp',
  apiStatus: 'apiStatus',
  responseTime: 'responseTime',
  errorRate: 'errorRate',
  uptime: 'uptime',
  lastError: 'lastError',
  healthScore: 'healthScore',
  details: 'details'
};

exports.Prisma.CampaignPartnerScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  partnerId: 'partnerId',
  status: 'status',
  budget: 'budget',
  targeting: 'targeting',
  creative: 'creative',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CapabilityMatrixScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  capabilities: 'capabilities',
  comparison: 'comparison',
  lastUpdated: 'lastUpdated',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DatasetScalarFieldEnum = {
  id: 'id',
  name: 'name',
  displayName: 'displayName',
  description: 'description',
  category: 'category',
  sourceType: 'sourceType',
  updateFrequency: 'updateFrequency',
  schema: 'schema',
  metadata: 'metadata',
  qualityScore: 'qualityScore',
  status: 'status',
  tags: 'tags',
  sourceConfig: 'sourceConfig',
  lastIngestion: 'lastIngestion',
  nextIngestion: 'nextIngestion',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DatasetVersionScalarFieldEnum = {
  id: 'id',
  datasetId: 'datasetId',
  version: 'version',
  description: 'description',
  schema: 'schema',
  metadata: 'metadata',
  size: 'size',
  recordCount: 'recordCount',
  checksums: 'checksums',
  location: 'location',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.DataQualityReportScalarFieldEnum = {
  id: 'id',
  datasetId: 'datasetId',
  reportDate: 'reportDate',
  overallScore: 'overallScore',
  completeness: 'completeness',
  accuracy: 'accuracy',
  consistency: 'consistency',
  validity: 'validity',
  freshness: 'freshness',
  metrics: 'metrics',
  anomalies: 'anomalies',
  issues: 'issues',
  recommendations: 'recommendations',
  processingTime: 'processingTime',
  recordsProcessed: 'recordsProcessed',
  createdAt: 'createdAt'
};

exports.Prisma.IngestionJobScalarFieldEnum = {
  id: 'id',
  datasetId: 'datasetId',
  jobType: 'jobType',
  status: 'status',
  config: 'config',
  schedule: 'schedule',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  errorMessage: 'errorMessage',
  logs: 'logs',
  recordsProcessed: 'recordsProcessed',
  recordsSucceeded: 'recordsSucceeded',
  recordsFailed: 'recordsFailed',
  metrics: 'metrics',
  retryCount: 'retryCount',
  maxRetries: 'maxRetries',
  nextRetryAt: 'nextRetryAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DatasetLineageScalarFieldEnum = {
  id: 'id',
  upstreamId: 'upstreamId',
  downstreamId: 'downstreamId',
  transformationType: 'transformationType',
  transformationLogic: 'transformationLogic',
  confidence: 'confidence',
  createdAt: 'createdAt'
};

exports.Prisma.DataConnectorScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  description: 'description',
  config: 'config',
  credentials: 'credentials',
  isActive: 'isActive',
  lastHealthCheck: 'lastHealthCheck',
  healthStatus: 'healthStatus',
  errorMessage: 'errorMessage',
  datasets: 'datasets',
  lastUsed: 'lastUsed',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SchemaMappingScalarFieldEnum = {
  id: 'id',
  datasetId: 'datasetId',
  name: 'name',
  description: 'description',
  sourceSchema: 'sourceSchema',
  targetSchema: 'targetSchema',
  mappingRules: 'mappingRules',
  validationRules: 'validationRules',
  isActive: 'isActive',
  lastApplied: 'lastApplied',
  successRate: 'successRate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  entityType: 'entityType',
  entityId: 'entityId',
  action: 'action',
  actorId: 'actorId',
  changes: 'changes',
  timestamp: 'timestamp'
};

exports.Prisma.DistributionSessionScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  currentScenario: 'currentScenario',
  presentationMode: 'presentationMode',
  lastSaved: 'lastSaved',
  hasUnsavedChanges: 'hasUnsavedChanges',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DistributionScenarioScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  name: 'name',
  description: 'description',
  isBaseline: 'isBaseline',
  parameters: 'parameters',
  projections: 'projections',
  lastModified: 'lastModified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DistributionChangeScalarFieldEnum = {
  id: 'id',
  scenarioId: 'scenarioId',
  field: 'field',
  oldValue: 'oldValue',
  newValue: 'newValue',
  userId: 'userId',
  timestamp: 'timestamp'
};

exports.Prisma.DistributionCacheScalarFieldEnum = {
  id: 'id',
  cacheKey: 'cacheKey',
  data: 'data',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.PartnerType = exports.$Enums.PartnerType = {
  DSP: 'DSP',
  SOCIAL: 'SOCIAL',
  SEARCH: 'SEARCH',
  RETAIL: 'RETAIL',
  VIDEO: 'VIDEO',
  NATIVE: 'NATIVE',
  EMAIL: 'EMAIL',
  AFFILIATE: 'AFFILIATE',
  OTHER: 'OTHER'
};

exports.PartnerStatus = exports.$Enums.PartnerStatus = {
  PENDING: 'PENDING',
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  SUSPENDED: 'SUSPENDED',
  ARCHIVED: 'ARCHIVED'
};

exports.OnboardingStatus = exports.$Enums.OnboardingStatus = {
  NOT_STARTED: 'NOT_STARTED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED'
};

exports.CapabilitySourceType = exports.$Enums.CapabilitySourceType = {
  MANUAL: 'MANUAL',
  API_DISCOVERY: 'API_DISCOVERY',
  DOCUMENTATION: 'DOCUMENTATION',
  RATE_CARD: 'RATE_CARD',
  FORM_SUBMISSION: 'FORM_SUBMISSION'
};

exports.ApiStatus = exports.$Enums.ApiStatus = {
  HEALTHY: 'HEALTHY',
  DEGRADED: 'DEGRADED',
  DOWN: 'DOWN',
  UNKNOWN: 'UNKNOWN'
};

exports.CampaignPartnerStatus = exports.$Enums.CampaignPartnerStatus = {
  ASSOCIATED: 'ASSOCIATED',
  CONFIGURED: 'CONFIGURED',
  LAUNCHED: 'LAUNCHED',
  PAUSED: 'PAUSED',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED'
};

exports.DatasetCategory = exports.$Enums.DatasetCategory = {
  MEASUREMENT: 'MEASUREMENT',
  TRANSACTION: 'TRANSACTION',
  SOCIAL: 'SOCIAL',
  DEMOGRAPHIC: 'DEMOGRAPHIC',
  MEDIA: 'MEDIA',
  DISTRIBUTOR: 'DISTRIBUTOR',
  EXTERNAL_API: 'EXTERNAL_API',
  INTERNAL: 'INTERNAL',
  OTHER: 'OTHER'
};

exports.DatasetSourceType = exports.$Enums.DatasetSourceType = {
  CSV_FILE: 'CSV_FILE',
  JSON_FILE: 'JSON_FILE',
  PARQUET_FILE: 'PARQUET_FILE',
  EXCEL_FILE: 'EXCEL_FILE',
  DATABASE_TABLE: 'DATABASE_TABLE',
  REST_API: 'REST_API',
  GRAPHQL_API: 'GRAPHQL_API',
  SFTP_SERVER: 'SFTP_SERVER',
  S3_BUCKET: 'S3_BUCKET',
  WEBHOOK: 'WEBHOOK',
  STREAMING: 'STREAMING',
  OTHER: 'OTHER'
};

exports.UpdateFrequency = exports.$Enums.UpdateFrequency = {
  REAL_TIME: 'REAL_TIME',
  EVERY_15_MINUTES: 'EVERY_15_MINUTES',
  HOURLY: 'HOURLY',
  DAILY: 'DAILY',
  WEEKLY: 'WEEKLY',
  MONTHLY: 'MONTHLY',
  QUARTERLY: 'QUARTERLY',
  ANNUALLY: 'ANNUALLY',
  ON_DEMAND: 'ON_DEMAND',
  IRREGULAR: 'IRREGULAR'
};

exports.DatasetStatus = exports.$Enums.DatasetStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  ARCHIVED: 'ARCHIVED',
  ERROR: 'ERROR',
  PROCESSING: 'PROCESSING'
};

exports.IngestionJobType = exports.$Enums.IngestionJobType = {
  FULL_LOAD: 'FULL_LOAD',
  INCREMENTAL: 'INCREMENTAL',
  APPEND_ONLY: 'APPEND_ONLY',
  UPSERT: 'UPSERT',
  DELETE: 'DELETE',
  VALIDATION: 'VALIDATION'
};

exports.JobStatus = exports.$Enums.JobStatus = {
  PENDING: 'PENDING',
  RUNNING: 'RUNNING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED',
  RETRYING: 'RETRYING'
};

exports.DataConnectorType = exports.$Enums.DataConnectorType = {
  FOURSQUARE_API: 'FOURSQUARE_API',
  NIELSEN_SFTP: 'NIELSEN_SFTP',
  IRI_SFTP: 'IRI_SFTP',
  ECOMMERCE_WEBHOOK: 'ECOMMERCE_WEBHOOK',
  BRANDWATCH_API: 'BRANDWATCH_API',
  SPRINKLR_API: 'SPRINKLR_API',
  DISTRIBUTOR_FTP: 'DISTRIBUTOR_FTP',
  CUSTOM_API: 'CUSTOM_API',
  FILE_SYSTEM: 'FILE_SYSTEM',
  DATABASE: 'DATABASE',
  OTHER: 'OTHER'
};

exports.ConnectorHealthStatus = exports.$Enums.ConnectorHealthStatus = {
  HEALTHY: 'HEALTHY',
  DEGRADED: 'DEGRADED',
  DOWN: 'DOWN',
  UNKNOWN: 'UNKNOWN'
};

exports.Prisma.ModelName = {
  User: 'User',
  Campaign: 'Campaign',
  RFP: 'RFP',
  Partner: 'Partner',
  PartnerCapability: 'PartnerCapability',
  CreativeSpec: 'CreativeSpec',
  PartnerHealthMetric: 'PartnerHealthMetric',
  CampaignPartner: 'CampaignPartner',
  CapabilityMatrix: 'CapabilityMatrix',
  Dataset: 'Dataset',
  DatasetVersion: 'DatasetVersion',
  DataQualityReport: 'DataQualityReport',
  IngestionJob: 'IngestionJob',
  DatasetLineage: 'DatasetLineage',
  DataConnector: 'DataConnector',
  SchemaMapping: 'SchemaMapping',
  AuditLog: 'AuditLog',
  DistributionSession: 'DistributionSession',
  DistributionScenario: 'DistributionScenario',
  DistributionChange: 'DistributionChange',
  DistributionCache: 'DistributionCache'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
