// Prisma schema for PathX API service

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                @id @default(uuid())
  email                 String                @unique
  name                  String
  role                  String
  organizationId        String?
  campaigns             Campaign[]
  auditLogs             AuditLog[]            @relation("AuditLogActor")
  distributionChanges   DistributionChange[]  @relation("DistributionChangeUser")
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
}

model Campaign {
  id                   String               @id @default(uuid())
  name                 String
  brandId              String
  objectives           Json
  budget               Json
  status               String
  userId               String
  user                 User                 @relation(fields: [userId], references: [id])
  rfps                 RFP[]
  partnerAssociations  CampaignPartner[]
  distributionSession  DistributionSession?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
}

model RFP {
  id          String   @id @default(uuid())
  campaignId  String
  campaign    Campaign @relation(fields: [campaignId], references: [id])
  partners    Json
  status      String
  requestedAt DateTime
  responses   Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Partner {
  id                   String               @id @default(uuid())
  name                 String
  displayName          String
  type                 PartnerType
  status               PartnerStatus        @default(PENDING)
  companyInfo          Json
  contactInfo          Json
  apiCredentials       Json?
  capabilities         PartnerCapability[]
  creativeSpecs        CreativeSpec[]
  targetingOptions     Json
  measurementCapabilities Json
  healthMetrics        PartnerHealthMetric[]
  onboardingStatus     OnboardingStatus     @default(NOT_STARTED)
  onboardingSteps      Json
  campaignAssociations CampaignPartner[]
  pricingInfo          Json
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
}

model PartnerCapability {
  id          String      @id @default(uuid())
  partnerId   String
  partner     Partner     @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  name        String
  description String?
  category    String
  details     Json
  isActive    Boolean     @default(true)
  lastUpdated DateTime    @default(now())
  sourceType  CapabilitySourceType
  sourceData  Json?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@unique([partnerId, name])
}

model CreativeSpec {
  id            String   @id @default(uuid())
  partnerId     String
  partner       Partner  @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  format        String
  dimensions    Json
  fileType      String
  maxFileSize   Int
  requirements  Json
  examples      Json?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model PartnerHealthMetric {
  id          String   @id @default(uuid())
  partnerId   String
  partner     Partner  @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  timestamp   DateTime @default(now())
  apiStatus   ApiStatus
  responseTime Float?
  errorRate   Float?
  uptime      Float?
  lastError   String?
  healthScore Float?
  details     Json?
}

model CampaignPartner {
  id         String   @id @default(uuid())
  campaignId String
  partnerId  String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  partner    Partner  @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  status     CampaignPartnerStatus @default(ASSOCIATED)
  budget     Json?
  targeting  Json?
  creative   Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([campaignId, partnerId])
}

model CapabilityMatrix {
  id           String   @id @default(uuid())
  name         String
  description  String?
  capabilities Json
  comparison   Json
  lastUpdated  DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum PartnerType {
  DSP
  SOCIAL
  SEARCH
  RETAIL
  VIDEO
  NATIVE
  EMAIL
  AFFILIATE
  OTHER
}

enum PartnerStatus {
  PENDING
  ACTIVE
  INACTIVE
  SUSPENDED
  ARCHIVED
}

enum OnboardingStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum ApiStatus {
  HEALTHY
  DEGRADED
  DOWN
  UNKNOWN
}

enum CampaignPartnerStatus {
  ASSOCIATED
  CONFIGURED
  LAUNCHED
  PAUSED
  COMPLETED
  FAILED
}

enum CapabilitySourceType {
  MANUAL
  API_DISCOVERY
  DOCUMENTATION
  RATE_CARD
  FORM_SUBMISSION
}

// Dataset Management Models
model Dataset {
  id                String                 @id @default(uuid())
  name              String
  displayName       String
  description       String?
  category          DatasetCategory
  sourceType        DatasetSourceType
  updateFrequency   UpdateFrequency
  schema            Json                   // Dataset schema definition
  metadata          Json                   // Additional metadata
  qualityScore      Float?                 // Overall quality score 0-100
  status            DatasetStatus          @default(ACTIVE)
  tags              String[]
  
  // Source information
  sourceConfig      Json                   // Connection details, URLs, etc.
  lastIngestion     DateTime?
  nextIngestion     DateTime?
  
  // Relationships
  versions          DatasetVersion[]
  qualityReports    DataQualityReport[]
  ingestionJobs     IngestionJob[]
  lineageUpstream   DatasetLineage[]       @relation("UpstreamDataset")
  lineageDownstream DatasetLineage[]       @relation("DownstreamDataset")
  
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  
  @@unique([name])
  @@index([category, status])
  @@index([sourceType])
}

model DatasetVersion {
  id            String           @id @default(uuid())
  datasetId     String
  dataset       Dataset          @relation(fields: [datasetId], references: [id], onDelete: Cascade)
  version       String           // Semantic version (e.g., "1.2.3")
  description   String?
  schema        Json             // Version-specific schema
  metadata      Json             // Version metadata
  size          BigInt?          // Size in bytes
  recordCount   BigInt?          // Number of records
  checksums     Json             // File checksums for validation
  location      String           // Storage location/path
  isActive      Boolean          @default(false) // Current active version
  
  createdAt     DateTime         @default(now())
  
  @@unique([datasetId, version])
  @@index([datasetId, isActive])
}

model DataQualityReport {
  id                String              @id @default(uuid())
  datasetId         String
  dataset           Dataset             @relation(fields: [datasetId], references: [id], onDelete: Cascade)
  reportDate        DateTime            @default(now())
  overallScore      Float               // 0-100 quality score
  
  // Quality dimensions
  completeness      Float               // % of non-null values
  accuracy          Float               // Data accuracy score
  consistency       Float               // Internal consistency
  validity          Float               // Format/constraint validation
  freshness         Float               // Data recency score
  
  // Detailed metrics
  metrics           Json                // Detailed quality metrics
  anomalies         Json                // Detected anomalies
  issues            Json                // Quality issues found
  recommendations   Json                // Improvement recommendations
  
  // Processing info
  processingTime    Int?                // Processing time in ms
  recordsProcessed  BigInt?             // Number of records analyzed
  
  createdAt         DateTime            @default(now())
  
  @@index([datasetId, reportDate])
  @@index([overallScore])
}

model IngestionJob {
  id            String              @id @default(uuid())
  datasetId     String
  dataset       Dataset             @relation(fields: [datasetId], references: [id], onDelete: Cascade)
  jobType       IngestionJobType
  status        JobStatus           @default(PENDING)
  
  // Job configuration
  config        Json                // Job-specific configuration
  schedule      String?             // Cron schedule for recurring jobs
  
  // Execution details
  startedAt     DateTime?
  completedAt   DateTime?
  errorMessage  String?
  logs          String?
  
  // Results
  recordsProcessed BigInt?
  recordsSucceeded BigInt?
  recordsFailed    BigInt?
  metrics          Json?           // Job execution metrics
  
  // Retry logic
  retryCount    Int                 @default(0)
  maxRetries    Int                 @default(3)
  nextRetryAt   DateTime?
  
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  
  @@index([datasetId, status])
  @@index([status, nextRetryAt])
  @@index([schedule])
}

model DatasetLineage {
  id               String    @id @default(uuid())
  upstreamId       String
  downstreamId     String
  upstream         Dataset   @relation("UpstreamDataset", fields: [upstreamId], references: [id], onDelete: Cascade)
  downstream       Dataset   @relation("DownstreamDataset", fields: [downstreamId], references: [id], onDelete: Cascade)
  
  // Lineage details
  transformationType String  // "direct_copy", "aggregation", "join", "filter", etc.
  transformationLogic Json?  // Detailed transformation description
  confidence         Float   @default(1.0) // Confidence in lineage relationship
  
  createdAt          DateTime @default(now())
  
  @@unique([upstreamId, downstreamId])
  @@index([upstreamId])
  @@index([downstreamId])
}

model DataConnector {
  id              String                @id @default(uuid())
  name            String
  type            DataConnectorType
  description     String?
  
  // Connection configuration
  config          Json                  // Connector-specific config
  credentials     Json?                 // Encrypted credentials
  isActive        Boolean               @default(true)
  
  // Health monitoring
  lastHealthCheck DateTime?
  healthStatus    ConnectorHealthStatus @default(UNKNOWN)
  errorMessage    String?
  
  // Usage tracking
  datasets        String[]              // Dataset IDs using this connector
  lastUsed        DateTime?
  
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  
  @@unique([name])
  @@index([type, isActive])
}

model SchemaMapping {
  id              String    @id @default(uuid())
  datasetId       String
  name            String
  description     String?
  
  // Source and target schemas
  sourceSchema    Json      // Original schema structure
  targetSchema    Json      // Target canonical schema
  mappingRules    Json      // Field mapping rules
  
  // Validation rules
  validationRules Json      // Custom validation rules
  isActive        Boolean   @default(true)
  
  // Usage tracking
  lastApplied     DateTime?
  successRate     Float?    // Success rate of mapping applications
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@unique([datasetId, name])
  @@index([datasetId, isActive])
}

// Enums for Dataset Management
enum DatasetCategory {
  MEASUREMENT      // Nielsen, IRI, foot traffic data
  TRANSACTION      // E-commerce, POS data
  SOCIAL           // Social listening, sentiment data
  DEMOGRAPHIC      // Census, survey data
  MEDIA            // Ad spend, media consumption
  DISTRIBUTOR      // Depletion, inventory data
  EXTERNAL_API     // Third-party API data
  INTERNAL         // Internally generated data
  OTHER
}

enum DatasetSourceType {
  CSV_FILE
  JSON_FILE
  PARQUET_FILE
  EXCEL_FILE
  DATABASE_TABLE
  REST_API
  GRAPHQL_API
  SFTP_SERVER
  S3_BUCKET
  WEBHOOK
  STREAMING
  OTHER
}

enum UpdateFrequency {
  REAL_TIME
  EVERY_15_MINUTES
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  ANNUALLY
  ON_DEMAND
  IRREGULAR
}

enum DatasetStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
  ERROR
  PROCESSING
}

enum IngestionJobType {
  FULL_LOAD      // Complete dataset refresh
  INCREMENTAL    // Only new/changed records
  APPEND_ONLY    // Only add new records
  UPSERT         // Insert or update records
  DELETE         // Remove records
  VALIDATION     // Data quality check only
}

enum JobStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
  RETRYING
}

enum DataConnectorType {
  FOURSQUARE_API
  NIELSEN_SFTP
  IRI_SFTP
  ECOMMERCE_WEBHOOK
  BRANDWATCH_API
  SPRINKLR_API
  DISTRIBUTOR_FTP
  CUSTOM_API
  FILE_SYSTEM
  DATABASE
  OTHER
}

enum ConnectorHealthStatus {
  HEALTHY
  DEGRADED
  DOWN
  UNKNOWN
}

model AuditLog {
  id         String   @id @default(uuid())
  entityType String
  entityId   String
  action     String
  actorId    String?
  actor      User?    @relation("AuditLogActor", fields: [actorId], references: [id])
  changes    Json
  timestamp  DateTime @default(now())
  @@map("audit_logs")
}

// Distribution Modeling Models
model DistributionSession {
  id                String                @id @default(uuid())
  campaignId        String
  campaign          Campaign              @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  scenarios         DistributionScenario[]
  currentScenario   String?
  presentationMode  Boolean               @default(false)
  lastSaved         DateTime              @default(now())
  hasUnsavedChanges Boolean               @default(false)
  metadata          Json                  // Additional session metadata
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  
  @@unique([campaignId])
  @@index([campaignId, updatedAt])
}

model DistributionScenario {
  id            String              @id @default(uuid())
  sessionId     String
  session       DistributionSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  name          String
  description   String?
  isBaseline    Boolean             @default(false)
  parameters    Json                // MSRP, margins, volume, etc.
  projections   Json                // Calculated projections
  lastModified  DateTime            @default(now())
  changes       DistributionChange[]
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  
  @@index([sessionId, isBaseline])
  @@index([sessionId, lastModified])
}

model DistributionChange {
  id          String                @id @default(uuid())
  scenarioId  String
  scenario    DistributionScenario  @relation(fields: [scenarioId], references: [id], onDelete: Cascade)
  field       String
  oldValue    Json
  newValue    Json
  userId      String?
  user        User?                 @relation("DistributionChangeUser", fields: [userId], references: [id])
  timestamp   DateTime              @default(now())
  
  @@index([scenarioId, timestamp])
  @@index([userId, timestamp])
}

model DistributionCache {
  id          String   @id @default(uuid())
  cacheKey    String   @unique
  data        Json
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  
  @@index([expiresAt])
  @@index([cacheKey])
}

